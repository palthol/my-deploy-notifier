name: Deploy to Render

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Create GitHub Deployment
        id: deployment
        run: |
          DEPLOY_ID=$(curl -X POST -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{"ref":"${{ github.ref }}","environment":"production"}' | jq -r '.id')
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
      
      - name: Deploy to Render
        run: |
          # Render API call to deploy goes here
          # This depends on the specific service
      
      - name: Check Render Deployment Status
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Waiting for Render deployment to complete..."
          # Poll until deployment is complete or times out
          for i in {1..30}; do
            DEPLOY_STATUS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys?limit=1 | jq -r '.[0].status')
            
            if [[ "$DEPLOY_STATUS" == "live" ]]; then
              echo "Deployment succeeded"
              echo "render_status=success" >> $GITHUB_ENV
              break
            elif [[ "$DEPLOY_STATUS" == "failed" ]]; then
              echo "Deployment failed"
              echo "render_status=failure" >> $GITHUB_ENV
              break
            fi
            
            echo "Deployment still in progress, waiting..."
            sleep 10
          done
          
          # If we reached the timeout
          if [[ "${{env.render_status}}" == "" ]]; then
            echo "Deployment timed out"
            echo "render_status=failure" >> $GITHUB_ENV
          fi
      
      - name: Update deployment status
        if: always()
        run: |
          STATUS="${{ env.render_status || (job.status == 'success' && 'success' || 'failure') }}"
          curl -X POST -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.deployment.outputs.deploy_id }}/statuses \
            -d '{"state":"'$STATUS'","environment":"production"}'